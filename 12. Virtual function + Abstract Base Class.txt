#include <bits/stdc++.h>

using namespace std;


class Base
{
    public:
    virtual void greet()
    {
        cout<<"base"<<endl;
    }
};

class Derived:public Base
{
    public:
    void greet()
    {
        cout<<"derived"<<endl;
    }
};

int main()
{
   Base* base_class_pointer;
   Derived d;
   base_class_pointer= &d;
   base_class_pointer->greet();
}


Rules for virtual functions:
They cannot be static
They are accessed by object pointers
Virtual functions can be a friend of another class
A virtual function in the base class might not be used.
If a virtual function is defined in a base class, there is no necessity of redefining it in the derived class







class CWH{
    protected:
        string title;
        float rating;
    public:
        CWH(string s, float r){
            title =  s;
            rating = r;
        }
        virtual void display()=0;
};



Pure Virtual Functions in C++
Pure virtual function is a function that doesnâ€™t perform any operation and the function is declared by assigning the value 0 to it. Pure virtual functions are declared in abstract classes.


Abstract Base Class in C++
Abstract base class is a class that has at least one pure virtual function in its body. The classes which are inheriting the base class must need to override the virtual function of the abstract class otherwise compiler will throw an error.



