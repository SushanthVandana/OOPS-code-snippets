#include <iostream>
#include <bits/stdc++.h>

using namespace std;

class Base{
    int b_private;
    static int count;
    public:
    int b_public;
    
    Base(int x,int y)
    {
        b_private=x;
        b_public=y;
        count++;
    }
    
    
    void greet(){
        cout<<"Hello"<<endl;
    }
    
    static void getCount()
    {
        cout<<count<<endl;
    }
};

int Base::count=0;

class Derived:public Base{
    int d_private;
    public:
    int d_public;
    
    Derived(int x,int y,int z,int w):Base(z,w)
    {
        d_private=x;
        d_public=y;
    }
};




int main()
{
    Derived d= Derived(1,2,3,4);
    Derived d1= Derived(5,6,7,8);
    cout<<d.b_public<<endl;
    Base::getCount();
}



cant initialize static member inside the class
initialize it globally using scope resolution operator

Static Data Members in C++
When a static data member is created, there is only a single copy of the data member which is shared between all the objects of the class. As we have discussed in our previous lecture that if the data members are not static then every object has an individual copy of the data member and it is not shared.

Static Methods in C++
When a static method is created, they become independent of any object and class. Static methods can only access static data members and static methods. Static methods can only be accessed using the scope resolution operator. An example program is shown below to demonstrate static data members and static methods in C++.

